/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module adder_5 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn,
    output reg [15:0] out,
    output reg cout,
    output reg [0:0] z,
    output reg [0:0] v,
    output reg [0:0] n
  );
  
  
  
  wire [(5'h10+0)-1:0] M_fulladder_s;
  wire [(5'h10+0)-1:0] M_fulladder_cout;
  reg [(5'h10+0)-1:0] M_fulladder_x;
  reg [(5'h10+0)-1:0] M_fulladder_y;
  reg [(5'h10+0)-1:0] M_fulladder_cin;
  
  genvar GEN_fulladder0;
  generate
  for (GEN_fulladder0=0;GEN_fulladder0<5'h10;GEN_fulladder0=GEN_fulladder0+1) begin: fulladder_gen_0
    full_adder_10 fulladder (
      .x(M_fulladder_x[GEN_fulladder0*(1)+(1)-1-:(1)]),
      .y(M_fulladder_y[GEN_fulladder0*(1)+(1)-1-:(1)]),
      .cin(M_fulladder_cin[GEN_fulladder0*(1)+(1)-1-:(1)]),
      .s(M_fulladder_s[GEN_fulladder0*(1)+(1)-1-:(1)]),
      .cout(M_fulladder_cout[GEN_fulladder0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  reg [15:0] s;
  
  always @* begin
    M_fulladder_x = a;
    M_fulladder_y = b;
    M_fulladder_cin[0+0-:1] = alufn[0+0-:1];
    M_fulladder_cin[1+14-:15] = M_fulladder_cout[0+14-:15];
    s = M_fulladder_s;
    cout = M_fulladder_cout[15+0-:1];
    s = 15'h0000;
    
    case (alufn[0+0-:1])
      1'h0: begin
        s = a + b;
      end
      1'h1: begin
        s = a - b;
      end
    endcase
    n = s[15+0-:1];
    v = (a[15+0-:1] & (b[15+0-:1] ^ alufn[0+0-:1]) & !M_fulladder_s[15+0-:1]) | (!a[15+0-:1] & !(b[15+0-:1] ^ alufn[0+0-:1]) & M_fulladder_s[15+0-:1]);
    z = ~(|s);
    out = s;
  end
endmodule
