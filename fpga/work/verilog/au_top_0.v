/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg [15:0] aVal;
  
  reg [15:0] bVal;
  
  reg rst;
  
  wire [16-1:0] M_aluComputer_out;
  wire [1-1:0] M_aluComputer_z;
  wire [1-1:0] M_aluComputer_v;
  wire [1-1:0] M_aluComputer_n;
  reg [6-1:0] M_aluComputer_alufn;
  reg [16-1:0] M_aluComputer_inputStringA;
  reg [16-1:0] M_aluComputer_inputStringB;
  alu_1 aluComputer (
    .alufn(M_aluComputer_alufn),
    .inputStringA(M_aluComputer_inputStringA),
    .inputStringB(M_aluComputer_inputStringB),
    .out(M_aluComputer_out),
    .z(M_aluComputer_z),
    .v(M_aluComputer_v),
    .n(M_aluComputer_n)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  reg [15:0] M_inputStringA_d, M_inputStringA_q = 1'h0;
  
  reg [15:0] M_inputStringB_d, M_inputStringB_q = 1'h0;
  
  
  localparam STOREA_state = 2'd0;
  localparam STOREB_state = 2'd1;
  localparam COMPUTE_state = 2'd2;
  
  reg [1:0] M_state_d, M_state_q = STOREA_state;
  
  wire [1-1:0] M_storage_out;
  reg [1-1:0] M_storage_in;
  button_conditioner_3 storage (
    .clk(clk),
    .in(M_storage_in),
    .out(M_storage_out)
  );
  
  wire [1-1:0] M_storageEdge_out;
  reg [1-1:0] M_storageEdge_in;
  edge_detector_4 storageEdge (
    .clk(clk),
    .in(M_storageEdge_in),
    .out(M_storageEdge_out)
  );
  
  wire [1-1:0] M_analyseALUFN_out;
  reg [1-1:0] M_analyseALUFN_in;
  button_conditioner_3 analyseALUFN (
    .clk(clk),
    .in(M_analyseALUFN_in),
    .out(M_analyseALUFN_out)
  );
  
  wire [1-1:0] M_analyseALUFNEdge_out;
  reg [1-1:0] M_analyseALUFNEdge_in;
  edge_detector_4 analyseALUFNEdge (
    .clk(clk),
    .in(M_analyseALUFNEdge_in),
    .out(M_analyseALUFNEdge_out)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_inputStringB_d = M_inputStringB_q;
    M_inputStringA_d = M_inputStringA_q;
    
    io_led = 24'h000000;
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_seg = 8'hff;
    io_sel = 4'hf;
    aVal = 8'h00;
    bVal = 8'h00;
    M_aluComputer_inputStringA = M_inputStringA_q;
    M_aluComputer_inputStringB = M_inputStringB_q;
    M_aluComputer_alufn = io_dip[0+2+5-:6];
    M_storage_in = io_button[0+0-:1];
    M_storageEdge_in = M_storage_out;
    M_analyseALUFN_in = io_button[1+0-:1];
    M_analyseALUFNEdge_in = M_analyseALUFN_out;
    
    case (M_state_q)
      STOREA_state: begin
        io_led[0+0+0-:1] = 1'h0;
        io_led[0+1+0-:1] = 1'h1;
        io_led[16+7-:8] = io_dip[16+7-:8];
        io_led[8+7-:8] = io_dip[8+7-:8];
        if (M_storageEdge_out) begin
          M_state_d = STOREB_state;
          M_inputStringA_d = {io_dip[16+7-:8], io_dip[8+7-:8]};
        end else begin
          if (M_analyseALUFNEdge_out) begin
            M_state_d = COMPUTE_state;
          end else begin
            M_state_d = STOREA_state;
          end
        end
      end
      STOREB_state: begin
        io_led[0+1+0-:1] = 1'h0;
        io_led[0+0+0-:1] = 1'h1;
        io_led[16+7-:8] = io_dip[16+7-:8];
        io_led[8+7-:8] = io_dip[8+7-:8];
        if (M_storageEdge_out) begin
          M_state_d = STOREA_state;
          M_inputStringB_d = {io_dip[16+7-:8], io_dip[8+7-:8]};
        end else begin
          M_state_d = STOREB_state;
        end
      end
      COMPUTE_state: begin
        io_led[0+0+0-:1] = 1'h1;
        io_led[0+1+0-:1] = 1'h1;
        io_led[0+5+2-:3] = {M_aluComputer_z, M_aluComputer_v, M_aluComputer_n};
        io_led[16+7-:8] = M_aluComputer_out[8+7-:8];
        io_led[8+7-:8] = M_aluComputer_out[0+7-:8];
        if (M_analyseALUFNEdge_out) begin
          M_state_d = STOREA_state;
          M_inputStringA_d = 16'h0000;
          M_inputStringB_d = 16'h0000;
        end else begin
          M_state_d = COMPUTE_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_inputStringB_q <= 1'h0;
    end else begin
      M_inputStringB_q <= M_inputStringB_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_inputStringA_q <= 1'h0;
    end else begin
      M_inputStringA_q <= M_inputStringA_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
